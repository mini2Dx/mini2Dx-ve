import org.apache.tools.ant.taskdefs.condition.Os
import com.badlogic.gdx.tools.texturepacker.TexturePacker

buildscript {
    repositories {
    	mavenLocal()
        mavenCentral()
        maven { url 'https://github.com/steffenschaefer/gwt-gradle-plugin/raw/maven-repo/' }
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://plugins.gradle.org/m2/' }
		//maven { url 'https://repo.spring.io/plugins-release/' }
    }
    dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'		
		classpath 'com.android.tools.build:gradle:3.4.2'
		classpath 'com.mobidevelop.robovm:robovm-gradle-plugin:2.3.7'
		classpath 'me.champeau.gradle:jmh-gradle-plugin:0.5.0-rc-2'
		classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0'
		classpath 'com.badlogicgames.gdx:gdx-tools:1.9.8'
		//classpath 'org.jetbrains.trove4j:trove4j:20160824'
    }
}

if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
	apply plugin: "io.codearte.nexus-staging"

	nexusStaging {
		packageGroup = 'org.mini2Dx'
		username = ossrhUser
		password = ossrhPassword
	}
}

ext {
	androidBeansVersion="1.0.0"
	androidVersion="4.4"
	artemisVersion="2.1.0"
	beanutilsVersion="1.8.3"
	gdxVersion="1.9.8"
	langVersion="3.1"
	multiDexVersion="1.0.1"
	nativesLoaderVersion="1.0.0"
	reflectionsVersion="0.9.10"
	roboVMVersion="2.3.7"
	
	junitVersion="4.8.1"
	jmockVersion="2.5.1"
	concurrentUnitVersion="0.4.2"
}

subprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"
    
    tasks.eclipse.doLast {
    		delete ".project"
	}
	
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
		maven { url "https://oss.sonatype.org/content/repositories/releases/" }
		maven { url 'https://maven.google.com' }
		maven { url 'https://repo.spring.io/plugins-release/' }
	}
}

def docProjects() {
	subprojects.findAll { !it.name.contains('uat') }
}

def projectVersion = '1.9.10-SNAPSHOT';

configure(docProjects()) {
	apply plugin: "signing"
	apply plugin: "maven"
	
	group = 'org.mini2Dx'
	version = projectVersion

	if(project.name.contains("android")) {
		apply plugin: "com.android.library"
		
		dependencies {
			implementation 'org.jetbrains.trove4j:trove4j:20160824'
		}

		task javadoc(type: Javadoc) {
			failOnError = false
			source = android.sourceSets.main.java.srcDirs
		    classpath += configurations.compile
		
		    afterEvaluate {
		        // Wait after evaluation to add the android classpath
		        // to avoid "buildToolsVersion is not specified" error
		        classpath += files(android.getBootClasspath())
		
		        // Process AAR dependencies
		        def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
		        classpath -= aarDependencies
		        aarDependencies.each { aar ->
		            // Extract classes.jar from the AAR dependency, and add it to the javadoc classpath
		            def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
		            classpath += files(outputPath)
		
		            // Use a task so the actual extraction only happens before the javadoc task is run
		            dependsOn task(name: "extract ${aar.name}").doLast {
		                extractEntry(aar, 'classes.jar', outputPath)
		            }
		        }
		    }
		}
		
		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from android.sourceSets.main.java.srcDirs[0]
		}
		
		task javadocJar(type: Jar) {
			classifier = 'javadoc'
			from javadoc
		}
		
		artifacts {
			archives javadocJar, sourcesJar
		}
	} else {
		apply plugin: "java"

		if(project.name.contains("artemis") ||
				project.name.contains("core") ||
				project.name.contains("tiled") ||
				project.name.contains("ui")) {
			apply plugin: "checkstyle"
		}
		
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		
		configurations {
			testOutput.extendsFrom (testCompile)
		}
		
		task sourcesJar(type: Jar) {
			classifier = 'sources'
			from sourceSets.main.allSource
		}
		
		task testJar(type: Jar, dependsOn: testClasses) {
			from sourceSets.test.output
			include '**/serialization/**/*.class','**/di/**/*.class'
			classifier = 'test'
		}
		
		task javadocJar(type: Jar) {
			classifier = 'javadoc'
			from javadoc
		}

		if(project.name.contains("artemis") || 
				project.name.contains("core") || 
				project.name.contains("tiled") || 
				project.name.contains("ui")) {
			checkstyle {
				configFile = project.file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
				toolVersion = "8.12"
				sourceSets = [project.sourceSets.main]
			}
		}
		
		artifacts {
			archives javadocJar, sourcesJar, testJar
			testOutput testJar
		}
	}
  
	// Maven Central publication
	if(project.hasProperty('ossrhUser')) {
		signing {
			sign configurations.archives
		}
		
		uploadArchives {
			repositories {
				mavenDeployer {
					// POM signature
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
					// Target repository
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						authentication(userName: ossrhUser, password: ossrhPassword)
					}
					pom.project {
						name project.name
						description project.description
						packaging 'jar'
						url 'https://github.com/mini2Dx/mini2Dx'
	
						scm {
							connection 'scm:git:https://github.com/mini2Dx/mini2Dx.git'
							developerConnection 'scm:git:git@github.com:mini2Dx/mini2Dx.git'
							url 'https://github.com/mini2Dx/mini2Dx.git'
						}
	
						licenses {
							license {
								name 'The BSD 3-Clause License'
								url 'https://opensource.org/licenses/BSD-3-Clause'
								distribution 'repo'
							}
						}
	
						developers {
							developer {
								id = 'tomcashman'
								name = 'Thomas Cashman'
								email = 'thomascashman404@gmail.com'
							}
						}
					}
				}
			}
		}
	}
}

project(":" + rootProject.name + "-core") {
	description = "mini2Dx core library"
    
    apply plugin: "me.champeau.gradle.jmh"
    apply plugin: "jacoco"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
        
		compile "org.mini2Dx:natives-loader:$nativesLoaderVersion"
        compile "org.apache.commons:commons-lang3:$langVersion"
        
		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile "net.jodah:concurrentunit:$concurrentUnitVersion"
    }
	
	jmh {
		timeUnit = 'ns'
		threads = Runtime.getRuntime().availableProcessors()
		warmupIterations = 10
		iterations = 10
		fork = Runtime.getRuntime().availableProcessors()
		jvmArgsPrepend = '-Xmx1024m'
	}
    
	jacocoTestReport {
		group = "Reporting"
		reports {
			xml.enabled true
			csv.enabled false
			html.destination file("${buildDir}/reports/coverage")
		}
		afterEvaluate {
			classDirectories = files(classDirectories.files.collect {
				fileTree(dir: it)
			})
		}
	}
}

project(":" + rootProject.name + "-desktop") {
	description = "mini2Dx desktop runtime"
	
    dependencies {
    	compile project(":" + rootProject.name + "-core")

    	compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-controllers-desktop:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-controllers-platform:$gdxVersion:natives-desktop"
    	
    	compile "org.reflections:reflections:$reflectionsVersion"
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
    }
}

project(":" + rootProject.name + "-headless") {
	description = "mini2Dx headless runtime"
	
    dependencies {
    	compile project(":" + rootProject.name + "-desktop")
    	
    	compile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    	
    	testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')
    }
}

project(":" + rootProject.name + "-tiled") {
	description = "mini2Dx Tiled support library"
	
    dependencies {
		compile project(":" + rootProject.name + "-core")

		testCompile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-artemis-odb") {
	description = "mini2Dx artemis-odb support library"
	
    dependencies {
		compile project(":" + rootProject.name + "-core")
		compile "net.onedaybeard.artemis:artemis-odb:$artemisVersion"
		compile "net.onedaybeard.artemis:artemis-odb-serializer:$artemisVersion"
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
    }
}

project(":" + rootProject.name + "-ui") {
	description = "mini2Dx UI library"
	
	apply plugin: "me.champeau.gradle.jmh"
	
	dependencies {
		compile project(":" + rootProject.name + "-core")
		
		testCompile "junit:junit:$junitVersion"
		testCompile "org.jmock:jmock-junit4:$jmockVersion"
		testCompile "org.jmock:jmock-legacy:$jmockVersion"
		testCompile project(":" + rootProject.name + "-desktop")
		
		jmh project(":" + rootProject.name + "-headless")
	}
	
	task packDefaultUiTheme {
		TexturePacker.process("$projectDir/default-mdx-theme", "$projectDir/src/main/resources", "default-mdx-theme")
	}
	
	jmh {
		timeUnit = 'ns'
		threads = Runtime.getRuntime().availableProcessors()
		warmupIterations = 10
		iterations = 10
		fork = Runtime.getRuntime().availableProcessors()
		jvmArgsPrepend = '-Xmx1024m'
	}
}

project(":" + rootProject.name + "-uats") {
	description = "mini2Dx UATs library"
	
    apply plugin: "java"
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7

    dependencies {
    	compile project(":" + rootProject.name + "-tiled")
		compile project(":" + rootProject.name + "-ui")
    }

	task copyUatResources(type: Copy) {
		from '../uats/src/main/resources', '../tiled/src/test/resources', '../ui/src/main/resources'
		into '../uats-android/assets'
	}

	if(!projectVersion.contains("SNAPSHOT")) {
		def docDirectory = new File(project.parent.projectDir.getParentFile(), "mini2Dx-website/docs/javadoc/${projectVersion}");
		println docDirectory.absolutePath

		task docs(type: Javadoc) {
			failOnError = false
			title = 'mini2Dx'
			source docProjects().collect {p -> p.name.contains("android") ? p.android.sourceSets.main.java.srcDirs : p.sourceSets.main.allJava }
			classpath = files(docProjects().collect {p -> p.name.contains("android") ? p.configurations.compile : p.sourceSets.main.compileClasspath})
			destinationDir = docDirectory
		}

		docs.dependsOn docProjects().build
	}
	processResources.dependsOn copyUatResources
}

project(":" + rootProject.name + "-uats-desktop") {
	description = "mini2Dx desktop UATs launcher"
	
    apply plugin: "java"
	apply plugin: "application"
    
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    dependencies {
        compile project(":" + rootProject.name + "-uats")
        compile project(":" + rootProject.name + "-desktop")
		compile "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
    }
}

if (hasAndroidSdk()) {
	project(":" + rootProject.name + "-android") {
		description = "mini2Dx Android runtime"
		
		dependencies {
			implementation project(":" + rootProject.name + "-core")
			
			implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
			implementation "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
			implementation "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
		}
	}
	
	project(":" + rootProject.name + "-uats-android") {
		description = "mini2Dx Android UATs launcher"
		
		apply plugin: "com.android.application"
		
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		
		ext {
			appName = 'mini2Dx-uats'
		}
		
		configurations { 
			natives
		}
		
		dependencies {
			implementation project(":" + rootProject.name + "-android")
			implementation project(":" + rootProject.name + "-uats")
			
			implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
			implementation "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
			implementation "com.badlogicgames.gdx:gdx-controllers-android:$gdxVersion"
			implementation "com.android.support:multidex:$multiDexVersion"
			
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-arm64-v8a"
			natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
       		natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86_64"
       		natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi"
       		natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-armeabi-v7a"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-arm64-v8a"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86"
			natives "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-x86_64"
			
			androidTestImplementation (project(path: ":" + rootProject.name + "-core", configuration: 'testOutput')) {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
            androidTestImplementation ("org.jmock:jmock-junit4:$jmockVersion") {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
            androidTestImplementation ("org.jmock:jmock-legacy:$jmockVersion") {
				exclude group: 'junit'
				exclude group: 'org.hamcrest'
			}
            androidTestImplementation 'com.android.support.test:runner:0.4'
            androidTestImplementation 'com.android.support.test:rules:0.4'
		}
	}
}

if (Os.isFamily(Os.FAMILY_MAC)) {
	project(":" + rootProject.name + "-ios") {
		description = "mini2Dx iOS runtime"
	
		dependencies {
			compile project(":" + rootProject.name + "-core")
			
			compile "com.mobidevelop.robovm:robovm-rt:$roboVMVersion"
        	compile "com.mobidevelop.robovm:robovm-cocoatouch:$roboVMVersion"
			compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
			compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
			compile "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-ios"
			
			compile "org.reflections:reflections:$reflectionsVersion"
			
			testCompile "junit:junit:$junitVersion"
			testCompile "org.jmock:jmock-junit4:$jmockVersion"
			testCompile "org.jmock:jmock-legacy:$jmockVersion"
		}
	}
	
	project(":" + rootProject.name + "-uats-ios") {
		description = "mini2Dx UATs iOS launcher"
		
		apply plugin: "java"
		apply plugin: "robovm"
		
		sourceCompatibility = 1.7
		targetCompatibility = 1.7
		
		configurations { natives }
		
		eclipse.project {
			natures 'org.robovm.eclipse.RoboVMNature'
		}
		
		dependencies {
			compile project(":" + rootProject.name + "-uats")
			compile project(":" + rootProject.name + "-ios")
		}
	}
}

boolean hasAndroidSdk() {
	try {
		def rootDir = "$rootDir"
		def localProperties = new File(rootDir, "local.properties")
		if (localProperties.exists()) {
			Properties properties = new Properties()
			localProperties.withInputStream { instr ->
				properties.load(instr)
			}
			def androidHome = properties.getProperty('sdk.dir')
			if(androidHome != null && androidHome.length() > 0) {
				println androidHome
				return true;
			}
		}
	} catch (all) {
		println all
	}
	try {
		def androidHome = "$System.env.ANDROID_HOME"
		if(androidHome != null && androidHome.length() > 0 && !androidHome.contains('null')) {
			println androidHome
			return true;
		}
	} catch (all) {
		println all
	}
	
	try {
		def androidExecPath = new ByteArrayOutputStream()
		if (Os.isFamily(Os.FAMILY_WINDOWS)) {
			return false
		} else {
			exec {
				commandLine 'which', 'android'
				standardOutput = androidExecPath
			}
		}
		return androidExecPath.toString() != null && androidExecPath.toString().trim().length() > 0;
	} catch (all) {
		println all
	}
	return false
}
